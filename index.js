// Generated by CoffeeScript 2.5.1
(function() {
  var GitHubPassPort, Strategy, app, checkAuth, checkAuthAn, express, listener, passport, session;

  express = require("express");

  app = express();

  session = require("express-session");

  GitHubPassPort = require("passport-github2");

  passport = require("passport");

  Strategy = GitHubPassPort.Strategy;

  checkAuth = function(req, res, next) {
    if (req.isAuthenticated) {
      return next();
    } else {
      return res.redirect("/auth");
    }
  };

  checkAuthAn = function(req, res, next) {
    if (!req.isAuthenticated) {
      return next();
    } else {
      return res.redirect("/logout");
    }
  };

  app.set("view engine", "ejs");

  passport.serializeUser(function(user, done) {
    return done(null, user);
  });

  passport.deserializeUser(function(obj, done) {
    return done(null, obj);
  });

  passport.use(new Strategy({
    clientID: "98d2eca7b51bfe8f59b7",
    clientSecret: "e6f7fc32f63c7f2d1132ad6eeb41ce0e6c323612",
    callbackURL: "http://localhost:8080/auth/callback"
  }, function(accessToken, refreshToken, profile, done) {
    return process.nextTick()(function() {
      return done(null, profile);
    });
  }));

  app.use(session({
    secret: "githb-secret-mueueueu",
    resave: true,
    saveUninitialized: true
  }));

  app.use(passport.initialize());

  app.use(passport.session());

  app.get("/", function(req, res) {
    if (!req.user) {
      return res.send("You are not logged in, go to /login");
    } else {
      return res.render("index", {req});
    }
  });

  app.get("/login", checkAuth);

  app.get("/logout", checkAuth, function(req, res) {
    req.logout();
    return res.redirect("/");
  });

  app.get("/auth", checkAuthAn, passport.authenticate("github", {
    scope: ["user:email"]
  }));

  app.get("/auth/callback", passport.authenticate("github", {
    failureRedirect: "/login"
  }, function(req, res) {
    return res.redirect("/");
  }));

  listener = app.listen(8080, function() {
    return console.log(`Express running on ${listener.address().port}`);
  });

}).call(this);
